pipeline {
    options {
        skipDefaultCheckout true
    }
    environment {
        baseURL = ""  // Inicializamos la variable que va a contener la URL de acceso a la API
    }
    agent any
    stages {
        stage('GetCode') {
            agent { label 'deploy' }
            steps {
                echo "Limpio el workspace:"
                cleanWs()

                echo "Datos de ejecución en el stage ${env.STAGE_NAME}:"
                echo "${WORKSPACE}"
                sh '''
                    echo "whoami: "`whoami`
                    echo "hostname: "`hostname`
                    echo "pwd: "`pwd`
                '''

                echo "Bajo el código del depósito de GitHub:"
                git branch: 'master', credentialsId: 'GitHubRW', url: 'https://github.com/unir-dbenach/todo-list-aws.git'

                echo "Bajo la configuración del deloy:"
                sh '''
                    wget https://raw.githubusercontent.com/unir-dbenach/todo-list-aws-config/refs/heads/production/samconfig.toml
                '''
            
                echo "Ejecuto los stash para poder pasar los ficheros necesarios a los agentes:"
                stash includes: 'src/**', name: 'code'                                      // Contiene el código de la aplicación
                stash includes: 'test/integration/todoApiTest.py', name: 'restTest'         // Contiene el fichero de pruebas para rest.
                stash includes: 'pytest.ini', name: 'pytestIni'                             // Contiene el pytest.ini, necesario para el test de rest al definir markers
                stash includes: 'samconfig.toml', name: 'samConfig'                         // Contiene la configuración de deploymen
                stash includes: 'template.yaml', name: 'templateAWS'                        // Contiene la plantilla de servicios a desplegar
                                
                echo "Limpio el workspace al final de la ejecución del stage"
                cleanWs()
            }
        }
        
        stage ('Deploy') {
            agent { label 'deploy' }
            steps {
                echo "Limpio el workspace:"
                cleanWs()

                echo "Datos de ejecución en el stage ${env.STAGE_NAME}:"
                echo "${WORKSPACE}"
                sh '''
                    echo "whoami: "`whoami`
                    echo "hostname: "`hostname`
                    echo "pwd: "`pwd`
                '''

                echo "Recupero los ficheros de código necesarios:"
                unstash 'code'        // Necesito el código de la aplicación.
                unstash 'samConfig'   // Necesito la configuración de deploy
                unstash 'templateAWS' // Necesito la configuración de servicios a desplegar
                
                echo "Hago el despliegue en AWS"
                sh '''
                    sam build
                    sam deploy --config-env production --config-file samconfig.toml --on-failure ROLLBACK --resolve-s3 | tee samDeploy.log
                '''
                echo "Recupero la URL por donde se publica el servicio:"
                script {
                    baseURL = sh(script: '''
                        grep "amazonaws.com/" samDeploy.log | head -1 | awk '{print $2}'
                    ''', returnStdout: true).trim()
                }
                
                echo "Limpio el workspace al final de la ejecución del stage"
                cleanWs()
            }
        }
        
        stage ('RestTest') {
            agent { label 'restTest' }
            steps {
                echo "Limpio el workspace:"
                cleanWs()

                echo "Datos de ejecución en el stage ${env.STAGE_NAME}:"
                echo "${WORKSPACE}"
                sh '''
                    echo "whoami: "`whoami`
                    echo "hostname: "`hostname`
                    echo "pwd: "`pwd`
                '''

                echo "Recupero los ficheros de código necesarios:"
                unstash 'pytestIni'      // Necesito el fichero de configuración de pytest.
                unstash 'restTest'      // Necesito el fichero que define los tests a realizar
                
                echo "Lanzamos las pruebas de integración."
                sh """
                    export PYTHONPATH=${WORKSPACE}
                    export BASE_URL=${baseURL}
                    pytest -v -m inocuo --junit-xml=result-rest.xml test/integration/*
                """
                junit 'result-rest.xml'
                
                echo "Limpio el workspace al final de la ejecución del stage"
                cleanWs()
            }
        }
    }

    post {
        always {
            script {
                echo "Ejecuto el post para limpiar la ejecución del pipeline (esta sección se ejecuta siempre aunque el build se marque como fallido):"
                echo "Elimino el stack de staging."
                
                echo "Recupero los ficheros de código necesarios:"
                unstash 'samConfig' // Necesito la configuración de deploy
                
                sh '''
                    sam delete --config-env production --config-file samconfig.toml --no-prompts
                '''
                echo "Limpio los workspaces."
                node( 'Agente1') {
                    echo "Limpio el workspace del agente1"
                    deleteDir()
                }
                node( 'Agente2') {
                    echo "Limpio el workspace del agente2"
                    deleteDir()
                }
                node( 'Agente3') {
                    echo "Limpio el workspace del agente3"
                    deleteDir()
                }
            }
        }
    }
}
